
<div is=ppsl-product-main>
<div class=card>
<div class=card-header>{{this.titleHTML}}</div>
<div class=card-content>{{this.contentHTML}}</div>
</div>
</div>
<script type=module>import{html as t}from"@uce"
export default{props:{contentHTML:null,selectedData:{product:null,problem:null,solution:null,link:null}},async loadLoop(t,e,s=1){e=JSON.parse(JSON.stringify(e))
const{editedData:i,data:n}=self.GlobalContext,o=document.getElementById("product").selectedData[document.getElementById("product").selectedProduct],l=getParentType(t),c=i[l+"s"].find((t=>t._id===o[l]))
if(!e){let s
try{s=await self.getBranchDirectoryContent(t)}catch(e){s=i[t]}e=s.map((t=>t.label))}c&&(e.push(...c.content[t]),e=[...new Set([...e])])
const a=[],d=i[t],r=Math.ceil(e.length/25),p=e.length>25&&"number"==typeof s
e.sort(((t,e)=>e-t))
for(let i=p?25*(s-1):0;(!p||i<25*s)&&i<e.length;i++){const s=e[i],o=d.find((t=>t._id===s))
if(o)a.push(o)
else if(void 0===o||void 0===o.new){let e=await self.loadFromGithub(t,s)
null!==e?a.push(n[t][e]):a.push({_id:s,content:{}})}}return p?{results:a,maxPages:r,currentPage:s}:a},create(e,s,i){const n=e+"s",o=getParentType(n)
let l
this.titleHTML=t`
        <p class="card-header-title">Creating new ${e} for ${o} "${s}"</p>
      `,l="problem"===e?{label:`Return to ${n} list`,func:()=>this.showPrevious(n)}:{label:`Return to ${o}`,func:()=>this.showPrevious(o)},this.contentHTML=t`
        <div is="ppsl-product-create"
          type="${n}"
          .data=${i}
          .customPreviousClick=${l}
          .customNextClick=${{label:`Add from existing ${e}s`,func:this[n].bind(this)}}
        ></div>
      `},showPrevious(t,e){const{editedData:s,data:i}=self.GlobalContext,n=document.getElementById("product").selectedData[document.getElementById("product").selectedProduct],o=getParentType(t)
let l
if(void 0!==o){const t=o+"s",e=n[o]
l=s[t].find((t=>t._id===e)),void 0===l&&(l=i[t].find((t=>t._id===e)))}else{const e=t+"s",o=n[t]
l=s[e].find((t=>t._id===o)),void 0===l&&(l=i[e].find((t=>t._id===o)))}return this[t](l)},cloneOrCopy(t,e,s,i=!1){t.preventDefault()
const{editedData:n,data:o}=self.GlobalContext,l=document.getElementById("product").selectedData[document.getElementById("product").selectedProduct],c=s+"s",a=getParentType(c),d=a+"s"
if(i){const t=n[d].findIndex((t=>t._id===l[a]))
if(-1===t){const t=JSON.parse(JSON.stringify(o[d].find((t=>t._id===l[a]))))
t.content[c].push(e._id)
const s=new Set(t.content[c])
t.content[c]=[...s]
const i=n[d].push(t)
n[d][i-1].edited=!0}else{const s=n[d][t]
s.content[c].push(e._id)
const i=new Set(s.content[c])
s.content[c]=[...i],s.edited=!0}self.saveDataToStorage("editedData",n),this.showPrevious(c)}else this.create.bind(this)(s,l[a],e.content)},async getChildContent(t,e,s){const i=getParentChildType(t.content)+"s"
return await this.loadLoop(i,s?null:t.content[i],e)},async problems(e,s){let i
if(this.titleHTML=t`<p class="card-header-title">Loading problems...</p>`,this.contentHTML=document.getElementById("root").loaderTemplate(3),e){const n=await this.getChildContent(e,s)
this.titleHTML=t`
          <p class="card-header-title">Problems for "${e._id}"</p>
          <a class="card-header-icon" onclick=${()=>this.create.bind(this)("problem",e._id)}>
            <span is="ppsl-icon" icon="plus-square"></span>
          </a>
        `,i=t`
          <div is="ppsl-product-menu"
            .data="${n.results||n}"
            .customNextClick=${{func:this.problem.bind(this)}}
            .paginationClick=${n.results?{func:this.problems.bind(this),currentPage:n.currentPage,maxPages:n.maxPages}:void 0}
          ></div>
        `}else{const e=await this.loadLoop("problems",null,s)
this.titleHTML=t`
          <p class="card-header-title">All problems</p>
          <a class="card-header-icon" onclick=${()=>this.showPrevious("problems")}>
            <span is="ppsl-icon" icon="x"></span>
          </a>
        `,i=t`
          <div is="ppsl-product-menu"
            .data="${e.results||e}"
            type="problem"
            .createOnClick="${!0}"
            .customNextClick=${{func:this.cloneOrCopy.bind(this)}}
            .paginationClick=${e.results?{func:this.problems.bind(this),currentPage:e.currentPage,maxPages:e.maxPages}:void 0}
          ></div>
        `}this.contentHTML=i},problem(e){this.titleHTML=t`
        <p class="card-header-title">Problem - "${e.content.label}"</p>
        <a class="card-header-icon" onclick=${this.toggleEdit.bind(this)}>
          <span is="ppsl-icon" icon="edit"></span>
        </a>
      `,this.selectedData.problem=e._id,document.getElementById("product").selectedData[this.productId].problem=e._id,this.contentHTML=t`
        <div is="ppsl-product-description"
          .data="${e}"
          type="problems"
          .customPreviousClick=${{label:"Return to problems list",func:()=>this.showPrevious("problems")}}
        ></div>
      `},async solutions(e,s){this.titleHTML=t`<p class="card-header-title">Loading solutions...</p>`,this.contentHTML=document.getElementById("root").loaderTemplate(3)
const i=await this.loadLoop("solutions",null,s)
this.titleHTML=t`
        <p class="card-header-title">All solutions</p>
        <a class="card-header-icon" onclick=${()=>this.showPrevious("problem")}>
          <span is="ppsl-icon" icon="x"></span>
        </a>
      `,this.contentHTML=t`
        <div is="ppsl-product-menu"
          .data="${i.results||i}"
          type="solution"
          .createOnClick="${!0}"
          .customNextClick=${{func:this.cloneOrCopy.bind(this)}}
          .paginationClick=${i.results?{func:this.solutions.bind(this),currentPage:i.currentPage,maxPages:i.maxPages}:void 0}
        ></div>
      `},solution(e){this.titleHTML=t`
        <p class="card-header-title">Solution - "${e.content.label}"</p>
        <a class="card-header-icon" onclick=${this.toggleEdit.bind(this)}>
          <span is="ppsl-icon" icon="edit"></span>
        </a>
      `,this.selectedData.solution=e._id,document.getElementById("product").selectedData[this.productId].solution=e._id,this.contentHTML=t`
        <div is="ppsl-product-description"
          .data="${e}"
          type="solutions"
          .customPreviousClick=${{label:"Return to problem",func:()=>this.showPrevious("problem")}}
          .customNextClick=${{label:"Show links",func:this.links.bind(this)}}
        ></div>
      `},async links(e,s){this.titleHTML=t`<p class="card-header-title">Loading links...</p>`,this.contentHTML=document.getElementById("root").loaderTemplate(3)
const i=await this.loadLoop("links",null,s)
this.titleHTML=t`
        <p class="card-header-title">All links</p>
        <a class="card-header-icon" onclick=${()=>this.showPrevious("solution")}>
          <span is="ppsl-icon" icon="x"></span>
        </a>
      `,this.contentHTML=t`
        <div is="ppsl-product-menu"
          .data="${i.results}"
          type="link"
          .createOnClick="${!0}"
          .customNextClick=${{func:this.cloneOrCopy.bind(this)}}
          .paginationClick=${i.results?{func:this.links.bind(this),currentPage:i.currentPage,maxPages:i.maxPages}:void 0}
        ></div>
      `},link(e){this.titleHTML=t`
        <p class="card-header-title">Link - "${e.content.label}"</p>
        <a class="card-header-icon" onclick=${this.toggleEdit.bind(this)}>
          <span is="ppsl-icon" icon="edit"></span>
        </a>
      `,this.selectedData.link=e._id,document.getElementById("product").selectedData[this.productId].link=e._id,this.contentHTML=t`
        <div is="ppsl-product-description"
          .data="${e}"
          type="links"
          .customPreviousClick=${{label:"Return to solution",func:()=>this.showPrevious("solution")}}
          .customNextClick=${{label:"Open link",func:t=>Object.assign(document.createElement("a"),{target:t.content.label,href:t.content.url}).click()}}
        ></div>
      `},toggleEdit(t){t&&(t.preventDefault(),t.stopPropagation())
const e=document.getElementById("productdescription").toggleEdit(),s=this.querySelector(".card-header-icon span")
s.icon=e?"x":"edit",s.showIcon()},setup(t){t.id="productmain",t.showPrevious.bind(t)("problems")}}
</script>