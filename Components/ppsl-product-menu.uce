
<div is=ppsl-product-menu>
{{ this.showReturnButton() }}
<ul class=menu-list>
{{ this.showMenu() }}
</ul>
{{ this.showPagination() }}
</div>
<script type=module>import{html as i}from"@uce"
export default{props:{type:null,data:null,defer:!1,createOnClick:!1},async loadData(){const i=await document.getElementById("productmain").getChildContent(this.data)
if(this.data=i,this.data.length>0){const t=getParentType(getParentChildType(i[0].content)+"s")
this.customNextClick={func:document.getElementById("productmain")[t].bind(document.getElementById("productmain"))}}return this.defer=!1,this.showMenu()},showMenu(){return this.defer?this.loadData():this.data.length>0?this.data.map(((t,s)=>i`
        <li>
          ${t.sha||t.new?i`
          <a onclick=${()=>this.createOnClick?void 0:this.customNextClick.func(this.data[s])}>
            <div class="level is-mobile">
              <div class="level-left">
                ${t.content.label.length>64?i`<small class="is-size-7 level-item" title="${t.content.label}">${`${this.paginationClick?`[${t._id}] `:""}${t.content.label.substr(0,70)}${t.content.label.length>72?"...":""}`}</small>`:i`<p class="level-item">${`${this.paginationClick?`[${t._id}] `:""}${t.content.label}`}</p>`}
                ${t.new?i`
                  <small class="level-item tag is-success">New</small>
                `:void 0}
                ${t.edited?i`
                  <small class="level-item tag">Edited</small>
                `:void 0}
                ${"closed"!==t.state&&!t.closedAt||t.mergedAt?void 0:i`
                  <small class="level-item tag">
                    <span is="ppsl-icon" icon="git-pull-request" class="has-text-danger"></span>
                    <span>Closed</span>
                  </small>
                `}
                ${t.mergedAt?i`
                  <small class="level-item tag">
                    <span is="ppsl-icon" icon="git-pull-request" class="has-text-success"></span>
                    <span>Merged</span>
                  </small>
                `:void 0}
                ${"open"===t.state?i`
                  <small class="level-item tag">
                    <span is="ppsl-icon" icon="git-pull-request" class="has-text-info"></span>
                    <span>Open</span>
                  </small>
                `:void 0}
              </div>
              <div class="level-right">
                ${this.createOnClick?i`
                  <div class="level-item">
                    <button class="button is-small is-text" onclick=${i=>this.customNextClick.func(i,this.data[s],this.type)}>
                      <span>Copy</span>
                      <span is="ppsl-icon" icon="copy"></span>
                    </button>
                  </div>
                  <div class="level-item">
                    <button class="button is-small is-text" onclick=${i=>this.customNextClick.func(i,this.data[s],this.type,!0)}}>
                      <span>Clone</span>
                      <span is="ppsl-icon" icon="link-2"></span>
                    </button>
                  </div>
                `:i`
                  <div class="level-item">
                    <span is="ppsl-icon" icon="chevron-right"></span>
                  </div>
                `}
              </div>
            </div>
          </a>`:i`<a>Unknown entry labeled "${t.content.label||t._id}".</a>`}
        </li>
      `)):i`
        <p class="has-text-centered">None available.</p>
      `},showReturnButton(){if(void 0!==this.customPreviousClick)return i`
          <a class="button is-fullwidth" onclick=${()=>this.customPreviousClick.func()}>
            <span is="ppsl-icon" icon="chevron-left"></span>
            <span>${this.customPreviousClick.label}</span>
          </a>
          <hr>
        `},showPagination(){if(!this.paginationClick)return
const{currentPage:t,maxPages:s}=this.paginationClick
return i`
        <hr>
        <nav class="pagination" role="navigation" aria-label="pagination">
          ${t>1?i`<a class="pagination-previous" onclick=${()=>this.paginationClick.func(this.paginationClick.entry,t-1)}>Previous</a>`:void 0}
          ${t<s?i`<a class="pagination-next" onclick=${()=>this.paginationClick.func(this.paginationClick.entry,t+1)}>Next page</a>`:void 0}
          <ul class="pagination-list">
            <li>
              <div class="field has-addons">
                <div class="control">
                  <input class="input" type="number" value="${t}" id="paginationsearch">
                </div>
                <div class="control">
                  <a class="button is-info" onclick=${()=>{this.paginationClick.func(this.paginationClick.entry,Number(document.getElementById("paginationsearch").value||1))}}>
                    <span is="ppsl-icon" icon="search"></span>
                  </a>
                </div>
              </div>
            </li>
            <li><span class="pagination-ellipsis">&hellip;</span></li>
            <li><a class="pagination-link" aria-label="${`Goto page ${s}`}" onclick=${()=>this.paginationClick.func(this.paginationClick.entry,s)}>${s}</a></li>
          </ul>
        </nav>
      `},setup(i){i.classList.add("menu")}}
</script>